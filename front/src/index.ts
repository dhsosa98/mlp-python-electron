import { app, BrowserWindow, ipcMain, Menu } from "electron";
import { PythonShell } from "python-shell";
import path from "path";
process.env["ELECTRON_DISABLE_SECURITY_WARNINGS"] = "true";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const isDev = require("electron-is-dev");

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", function () {
  const options = {
    scriptPath: isDev ? path.join(__dirname, "../../../server") : undefined,
    pythonPath: !isDev ? path.join(__dirname, "/../../../../../../py/server.exe") : undefined,
  }
  const apiUrl = "http://localhost:8000/";
  var subpy = new PythonShell('main.py', options);
  // if (isDev) {
  //   var subpy = new PythonShell('main.py', options);
  // } else {
  //   var subpy = new PythonShell('.', options);
  // }

  var rq = require("request-promise");

  const createWindow = (): void => {
    const assetsPath = !isDev
      ? "../../../assets/icon.png"
      : "../../assets/icon.png";
    // Create the browser window.
    let mainWindow: BrowserWindow = new BrowserWindow({
      icon: path.join(__dirname, assetsPath),
      height: 600,
      width: 800,
      // maxWidth:800,
      // maxHeight:800,
      // fullscreenable:false,
      // fullscreen: false,
      // maximizable: false,
      webPreferences: {
        nodeIntegration: true,
        contextIsolation: false,
      },
    });

    // mainWindow.setBackgroundColor("#343B38");
    mainWindow.removeMenu();

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY + "#/");

    // Open the DevTools.

    if (isDev) {
      mainWindow.webContents.openDevTools();
    }

    mainWindow.on("closed", function () {
      subpy.kill("SIGKILL");
      mainWindow = null;
    });
  };

  var startUp = function () {
    rq(apiUrl)
      .then(function (htmlString: string) {
        console.log("server started!");
        createWindow();
      })
      .catch(function (err: any) {
        console.log('waiting for the server start...');
        startUp();
      });
  };

  startUp();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
